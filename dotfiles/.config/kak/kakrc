  #
  # FIX EDITOR CONFIG LOADING
  #
hook global InsertChar \t %{
  exec -draft -itersel h@
}


  #
  # Global window hooks
  #

#hook global BufCreate .* %{editorconfig-load}
  #
  # Basic Settings
  #

# Show line numbers
addhl global/ number-lines
# Show matching brackets
addhl global/ show-matching
# Show whitespace characters
addhl global/ show-whitespaces
# Scroll offset
set-option global scrolloff 5,0
# Colors
colorscheme lucius
face global Whitespace rgb:555555
face global Comment rgb:777777
# Insert Cursor is black on yellow
hook global InsertBegin .* %{
 set-face buffer PrimaryCursor rgb:000000,rgb:FFFF00+B
}
# Normal cursor is black on white
hook global InsertEnd .* %{
 set-face buffer PrimaryCursor rgb:000000,rgb:ffffff
}
# Turn off autocomplete
set global autocomplete  prompt

  #
  # Normal Mode Commands
  #

# Use # to comment lines
map global normal '#' :comment-line<ret>
# <c-d> to select matches
map global normal <c-d> *
# <c-w> to select matches with word boundary
map global normal <c-w> <a-*>
# Move line down
map global normal '(' :move-lines-down<ret>
# Move line up
map global normal ')' :move-lines-up<ret>
# Change without yank
map global normal c \"_c
# Delete without yank
map global normal d \"_d

  #
  # User key (,) bindings
  #
# ,l changes line preserving whitespace
map global user l I<esc><a-l>c -docstring 'Change at start of line'
# ,y to yank to clipboard
map global user y '<a-|>pbcopy<ret>' -docstring 'Yank to clipboard'
# ,p to paste from clipboard without auto-indent
map global user p '<!>pbpaste<ret>' -docstring 'Paste from clipboard'
# ,f to open file with fzf
map global user f ':of<ret>' -docstring 'Open File with fzf'
# ,b to open buffer with fzf
map global user b ':ob<ret>' -docstring 'Open Buffer with fzf'
# ,c to close current buffer
map global user c ':delete-buffer<ret>' -docstring 'Close buffer'
# ,s to write current buffer
map global user s ':write<ret>' -docstring 'Save buffer'
# ,< to pipe selection to sort
map global user < '|sort<ret>' -docstring 'Sort selected lines'
# ,> to pipe selection to sort in reverse order
map global user > '|sort -r<ret>' -docstring 'Reverse sort selected lines'
# ,w to turn ON linewrap in current buffer
map global user w ':addhl buffer/ wrap <ret>' -docstring 'Linewrap on'
# ,W to OFF linewrap in current buffer
map global user W ':remove-highlighter buffer/ wrap <ret>' -docstring 'Linewrap off'


  #
  # Hooks
  #

# Use (j|J)(k|K) to exit normal mode
hook global InsertChar (k|K) %{ try %{
  exec -draft hH <a-k>(j|J)(k|K)<ret> d
  exec <esc>
}}


  #
  # Commands
  #

# Git shortcuts
def blame %{ git blame }
def blamee %{ git hide-blame}

# Put filepath in clipboard
def clip-path -docstring 'copy current filepath to clipboard' %{
    eval %sh{ echo $kak_buffile | pbcopy }
}

# Move Lines Up and Down
def move-lines-up -params 0..1 -docstring 'move-line-above [count]: select full lines and move line above' %{
  exec "<a-x>yd%arg{1}k<a-P>"
}

def move-lines-down -params 0..1 -docstring 'move-line-below [count]: select full lines and move line below' %{
  exec "<a-x>yd%arg{1}j<a-P>"
}


  #
  # FZF integration
  #
define-command -docstring 'Invoke fzf to open a file' -params 0 of %{
    evaluate-commands %sh{
        if [ -z "${kak_client_env_TMUX}" ]; then
            printf 'fail "client was not started under tmux"\n'
        else
            #file="$(find . -type f |TMUX="${kak_client_env_TMUX}" fzf-tmux --preview 'cat {}' -d 30)"
            file="$(rg --files |TMUX="${kak_client_env_TMUX}" fzf-tmux --preview 'cat {}' -d 30)"
            if [ -n "$file" ]; then
                printf 'edit "%s"\n' "$file"
            fi
        fi
    }
}

# the original version no longer works since kak_buflist is no longer ":" separated.
# this one works if you don't have single quote in file names.

def -override -docstring 'invoke fzf to select a buffer' \
  ob %{eval %sh{
      BUFFER=$(printf %s\\n ${kak_buflist} | sed "s/'//g" |fzf-tmux --preview 'cat {}' -d 30)
      if [ -n "$BUFFER" ]; then
        echo buffer ${BUFFER}
      fi
} }


# Cursor position in buffer as percent
# decl str modeline_pos_percent

# hook global WinCreate .* %{
#     hook window NormalIdle .* %{ %sh{
#         echo "set window modeline_pos_percent '$(($kak_cursor_line * 100 / $kak_buf_line_count))'"
#     } }
# }
